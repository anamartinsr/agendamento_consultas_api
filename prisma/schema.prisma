// This isyourPrismaschemafile,
//learnmoreaboutitinthedocs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TypeUser {
  CLIENT
  ADMIN
  PROFESSIONAL
}

enum Status {
  RESERVED
  CANCELLED
  COMPLETED
  AVAILABLE
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  dt_birth        DateTime
  cpf             String         @unique
  email           String         @unique
  password        String
  typeUser        TypeUser
  description     String?
  address         Address
  phone           String
  passwordChanged Boolean        @default(false)
  Appointment     Appointment[]
  History         History[]
  Professional    Professional[]
}

type Address {
  zip_code String
  number   String
  street   String
  city     String
}

model Professional {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  specialty              String
  userId                 String                  @unique @db.ObjectId
  user                   User                    @relation(fields: [userId], references: [id])
  appointment            Appointment[]
  availability           Availability[]
  history                History[]
  professionalProcedures ProfessionalProcedure[]
}

model Procedure {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  price                  Float
  recommendation         String
  appointment            Appointment[]
  history                History[]
  professionalProcedures ProfessionalProcedure[]
}

model ProfessionalProcedure {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  professionalId String       @db.ObjectId
  procedureId    String       @db.ObjectId
  professional   Professional @relation(fields: [professionalId], references: [id])
  procedure      Procedure    @relation(fields: [procedureId], references: [id])
}

model Availability {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  professionalId String       @db.ObjectId
  professional   Professional @relation(fields: [professionalId], references: [id])
  date           DateTime
  time           String
  status         Status       @default(AVAILABLE)
}

model Appointment {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  description      String
  status           Status
  date             DateTime
  isDeleted        Boolean      @default(false)
  userId           String       @db.ObjectId
  user             User         @relation(fields: [userId], references: [id])
  professionalId   String       @db.ObjectId
  professional     Professional @relation(fields: [professionalId], references: [id])
  procedureId      String       @db.ObjectId
  procedure        Procedure    @relation(fields: [procedureId], references: [id])
  dateStatusChange DateTime?    @default(now())
  History          History[]
}

model History {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime
  appointmentId  String       @db.ObjectId
  appointment    Appointment  @relation(fields: [appointmentId], references: [id])
  procedureId    String       @db.ObjectId
  procedure      Procedure    @relation(fields: [procedureId], references: [id])
  professionalId String       @db.ObjectId
  professional   Professional @relation(fields: [professionalId], references: [id])
  userId         String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
}
