// This isyourPrismaschemafile,
//learnmoreaboutitinthedocs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TypeUser {
  CLIENTE
  ADMIN
  PROFISSIONAL
}

enum Status {
  RESERVADA
  CANCELADA
  CONCLUIDA
  DISPONIVEL
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  dt_birth      Date
  cpf           String        @unique
  email         String        @unique
  password      String
  typeUser      TypeUser
  description   String?
  zip_code      String
  number        String
  street        String
  city          String
  phone         String
  consulta      Consulta[]
  historico     Historico[]
  profissional  Profissional?
  passwordChanged Boolean       @default(false)
  LogConsulta LogConsulta[]
}

model Profissional {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  specialty                String
  userId                   String                     @unique @db.ObjectId
  user                     User                       @relation(fields: [usuarioId], references: [id])
  procedimentos            Procedimento[]
  consultas                Consulta[]
  disponibilidades         Disponibilidade[]
  ProfissionalProcedimento ProfissionalProcedimento[]
  Historico                Historico[]
}

model Procedimento {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  price                    Float
  recommendation           String
  profissionalId           String                     @db.ObjectId
  profissional             Profissional               @relation(fields: [profissionalId], references: [id])
  consultas                Consulta[]
  Historico                Historico[]
  ProfissionalProcedimento ProfissionalProcedimento[]
}

model Disponibilidade {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  profissionalId String       @db.ObjectId
  profissional   Profissional @relation(fields: [profissionalId], references: [id])
  date           DateTime
  time        String
  status         Status       @default(DISPONIVEL)
}

model Consulta {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  description           String
  status              Status
  date                DateTime
  isDeleted           Boolean       @default(false)
  usuariosId          String        @db.ObjectId
  user                User          @relation(fields: [usuariosId], references: [id])
  profissionalId      String        @db.ObjectId
  profissional        Profissional  @relation(fields: [profissionalId], references: [id])
  procedimentoId      String        @db.ObjectId
  procedimento        Procedimento  @relation(fields: [procedimentoId], references: [id])
  dateStatusChange DateTime?     @default(now())
  Historico           Historico[]
  LogConsulta         LogConsulta[]
}

model Historico {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime
  consultaId     String       @db.ObjectId
  consulta       Consulta     @relation(fields: [consultaId], references: [id])
  procedimentoId String       @db.ObjectId
  procedimento   Procedimento @relation(fields: [procedimentoId], references: [id])
  profissionalId String       @db.ObjectId
  profissional   Profissional @relation(fields: [profissionalId], references: [id])
  usuariosId     String       @db.ObjectId
  user           User         @relation(fields: [usuariosId], references: [id])
}

model ProfissionalProcedimento {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  profissionalId String       @db.ObjectId
  procedimentoId String       @db.ObjectId
  profissional   Profissional @relation(fields: [profissionalId], references: [id])
  procedimento   Procedimento @relation(fields: [procedimentoId], references: [id])
}
