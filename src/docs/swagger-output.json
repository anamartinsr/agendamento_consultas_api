{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "API Scheduling of appointments",
    "description": "API to manage client and professional registration, appointment scheduling, availability management and appointment history."
  },
  "host": "localhost:3000",
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
"/history/": {
      "get": {
        "tags": ["History"],
        "summary": "Retrieve all history records",
        "description": "Returns a list of all history records in the system.",
        "responses": {
          "200": {
            "description": "List of history records retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["History"],
        "summary": "Create a new history record",
        "description": "Creates a new history record with the provided data.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "History record to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HistoryInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "History record created successfully",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/history/{id}": {
      "get": {
        "tags": ["History"],
        "summary": "Retrieve a history record by ID",
        "description": "Returns a single history record identified by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the history record (UUID)",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "History record retrieved successfully",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "404": {
            "description": "History record not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List all user",
        "description": "This endpoint will list all users",
        "responses": {
          "200": {
            "description": "List of users"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user",
        "description": "This endpoint will create a new user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "user"
                },
                "dt_birth": {
                  "type": "number",
                  "example": "2025-01-07"
                },
                "cpf": {
                  "type": "string",
                  "example": "xxx-xxx-xxx-xx"
                },
                "email": {
                  "type": "string",
                  "example": "user@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "1234"
                },
                "typeUser": {
                  "type": "string",
                  "example": "CLIENTE"
                },
                "description": {
                  "type": "string",
                  "example": "appointments"
                },
                "address": {
                  "type": "string",
                  "example": "xxxxx-xxx"
                },
                "zip_code": {
                  "type": "string",
                  "example": "434343424"
                },
                "number": {
                  "type": "string",
                  "example": "323"
                },
                "street": {
                  "type": "string",
                  "example": "name street"
                },
                "city": {
                  "type": "string",
                  "example": "ny"
                },
                "phone": {
                  "type": "string",
                  "example": "23232323232"
                },
                "passwordChanged": {
                  "type": "string",
                  "example": "false"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully."
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List a user",
        "description": "This endpoint will list a users",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of user"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a user",
        "description": "This endpoint will update a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "user"
                },
                "idade": {
                  "type": "number",
                  "example": 18
                },
                "cpf": {
                  "type": "string",
                  "example": "xxx-xxx-xxx-xx"
                },
                "email": {
                  "type": "string",
                  "example": "user@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "1234"
                },
                "tipoUser": {
                  "type": "string",
                  "example": "CLIENTE"
                },
                "descricao": {
                  "type": "string",
                  "example": "appointments"
                },
                "cep": {
                  "type": "string",
                  "example": "xxxxx-xxx"
                },
                "numero": {
                  "type": "number",
                  "example": 10
                },
                "rua": {
                  "type": "string",
                  "example": "Rua XYZ"
                },
                "cidade": {
                  "type": "string",
                  "example": "Cidade ABC"
                },
                "telefone": {
                  "type": "string",
                  "example": "xx-xxxxx-xxxx"
                },
                "senhaAlterada": {
                  "type": "string",
                  "example": "false"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update of user"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user",
        "description": "This endpoint will delete a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete of user"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/tokens/": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Create a new tokens",
        "description": "This endpoint will create a new token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "token data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "cpf": {
                  "type": "string",
                  "example": "xxx-xxx-xxx-xx"
                },
                "password": {
                  "type": "string",
                  "example": "1234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Token generated successfully."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/professional/": {
      "post": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/professional/{id}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/procedure/": {
      "post": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/procedure/{id}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/availability/": {
      "post": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/availability/{id}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/appointment/": {
      "post": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/appointment/{id}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/email/": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Create a new email",
        "description": "This endpoint will create a new email",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "email data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "to": {
                  "type": "string",
                  "example": "to"
                },
                "subject": {
                  "type": "string",
                  "example": "subject"
                },
                "html": {
                  "type": "string",
                  "example": "html"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "email send successfully."
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/professionalProcedure/": {
      "post": {
        "tags": [
          "ProfessionalProcedure"
        ],
        "summary": "Create a new association ProfessionalProcedure",
        "description": "This endpoint will create a new association ProfessionalProcedure",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Professional and Procedure data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "professionalId": {
                  "type": "number",
                  "example": 23423423434324
                },
                "procedureId": {
                  "type": "number",
                  "example": 2342434234324
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Association ProfessionalProcedure generated successfully."
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}
